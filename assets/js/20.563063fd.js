(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{616:function(t,a,s){"use strict";s.r(a);var n=s(58),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"通用项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用项"}},[t._v("#")]),t._v(" 通用项")]),t._v(" "),s("h2",{attrs:{id:"平面点集的法线识别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平面点集的法线识别"}},[t._v("#")]),t._v(" 平面点集的法线识别")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * robust 识别出点集或者多边形的法线\n * @param {Polygon|Array<Point|Vector3>} points\n * @returns {Vector3} 法线\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recognitionPolygonNormal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"判断多个点是否共线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断多个点是否共线"}},[t._v("#")]),t._v(" 判断多个点是否共线:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 判断多个点是否共线:\n * 考虑情况点之间的距离应该大于最小容忍值\n * @param  {...Point} ps\n * @returns {boolean}\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pointsCollinear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("ps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"点集操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点集操作"}},[t._v("#")]),t._v(" 点集操作")]),t._v(" "),s("h3",{attrs:{id:"计算包围盒"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算包围盒"}},[t._v("#")]),t._v(" 计算包围盒")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 计算包围盒\n * @param {*} points  点集\n * @returns {Array[min,max]} 返回最小最大值\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("boundingBox")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"空间操作-平移-旋转是-缩放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间操作-平移-旋转是-缩放"}},[t._v("#")]),t._v(" 空间操作（平移，旋转是，缩放)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 平移\n * @param {*} points\n * @param {*} distance\n * @param {*} ref\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("translate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" distance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 旋转\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" axis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" angle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 两个向量之间存在的旋转量来旋转点集\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rotateByUnitVectors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vFrom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vTo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 缩放\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scale")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 响应矩阵\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMatrix4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),s("h2",{attrs:{id:"折线或者路径简化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#折线或者路径简化"}},[t._v("#")]),t._v(" 折线或者路径简化")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("折线或者路径中过密或者过直的点去除"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" 年 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 月 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" 增加"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 简化点集数组，折线，路径\n * @param {*} points 点集数组，折线，路径 ,继承Array\n * @param {*} maxDistance  简化最大距离 默认值0.1\n * @param {*} maxAngle  简化最大角度 弧度 默认值 Math.PI / 180 * 5\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("simplifyPointList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxDistance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxAngle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"三角剖分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三角剖分"}},[t._v("#")]),t._v(" 三角剖分")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 三角剖分  earcut.js\n * @param {Array} boundary 边界\n * @param {Array<Array>} holes 洞的数组\n * @param {options:{feature,dim,normal}} feature 选择平平面\n * @returns {Array<Number>} 三角形索引数组\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trianglation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inboundary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("holes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("\r\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("../../"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}}),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])])])]),s("h2",{attrs:{id:"挤压"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挤压"}},[t._v("#")]),t._v(" 挤压")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 挤压\n * @param {Polygon|Array<Point|Vector3> }  shape   多边形或顶点数组\n * @param {Path|Array<Point|Vector3> } path  路径或者或顶点数组\n * @param {Object} options {\n *      isClosed: false,闭合为多边形\n *      isClosed2: false, 闭合为圈\n *      textureEnable: true, 计算纹理坐标\n *      textureScale: new Vector2(1, 1),纹理坐标缩放\n *      smoothAngle: Math.PI / 180 * 30,大于这个角度则不平滑\n *      sealStart: true, 是否密封开始面\n *      sealEnd: true,是否密封结束面}\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("extrude")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"缝合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缝合"}},[t._v("#")]),t._v(" 缝合")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 缝合shape集合\n * @param {Array<Array<Point|Vector3>} shapes  路基 点集的集合， 每个shape的点数量一致\n * @param {Boolean} isClosed 每一个shape是否是封闭的圈 默认false\n * @returns {Array} 返回三角形集合 如果有所用范围索引，否则返回顶点\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("linkSides")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isClosed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isClosed2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 缝合s 折线集合\n * @param {Array} polylines  路基 点集的集合，\n * @returns {Array} 返回三角形集合 如果有所用范围索引，否则返回顶点\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("linkPolyline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("polylines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 缝合 多边形集合\n * @param {Array} polygon\n * @returns {Array} 返回三角形集合 如果有所用范围索引，否则返回顶点\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("linkPloygon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("polygon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);